"use client"
// ‚úÖ B·∫Øt bu·ªôc trong Next.js khi s·ª≠ d·ª•ng hook (React state, browser API, v.v.)
// V√¨ hook n√†y t∆∞∆°ng t√°c v·ªõi v√≠ ng∆∞·ªùi d√πng ‚Üí ph·∫£i ch·∫°y ·ªü client-side

import { useSignAndExecuteTransaction } from "@mysten/dapp-kit"
// üß© Hook d√πng ƒë·ªÉ k√Ω (sign) v√† g·ª≠i (execute) giao d·ªãch t·ªõi m·∫°ng Sui th√¥ng qua v√≠ ƒë√£ k·∫øt n·ªëi.

import { Transaction } from "@mysten/sui/transactions"
// üß© Class Transaction c·ªßa SDK gi√∫p t·∫°o m·ªôt giao d·ªãch Move, th√™m call, set gas, v.v.


// ‚öôÔ∏è L·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt t·ª´ file .env.local
const TOKEN_A_TYPE = process.env.NEXT_PUBLIC_TOKEN_A_TYPE!      // Coin type c·ªßa Token A
const TOKEN_B_TYPE = process.env.NEXT_PUBLIC_TOKEN_B_TYPE!      // Coin type c·ªßa Token B
const TREASURY_CAP_A = process.env.NEXT_PUBLIC_TREASURY_CAP_A!  // Object ID c·ªßa TreasuryCap<Token A>
const TREASURY_CAP_B = process.env.NEXT_PUBLIC_TREASURY_CAP_B!  // Object ID c·ªßa TreasuryCap<Token B>
const PKG = process.env.NEXT_PUBLIC_PACKAGE_ID!                 // ID c·ªßa package ch·ª©a module Move


// üß† T√™n module v√† function trong package Move
const TOKEN_A = "token_a"                       // Module ch·ª©a logic mint token A
const TOKEN_B = "token_b"                       // Module ch·ª©a logic mint token B
const FN_MINT_HULK_TOKEN = "mint_token"         // H√†m Move ƒë·ªÉ mint token A (Hulk)
const FN_MINT_GIRLFRIEND = "mint_token"         // H√†m Move ƒë·ªÉ mint token B (Girlfriend)


export function useMint() {
    // üß© Hook t·ª´ @mysten/dapp-kit cung c·∫•p h√†m signAndExecuteTransaction
    // gi√∫p k√Ω giao d·ªãch b·∫±ng v√≠ v√† g·ª≠i l√™n blockchain.
    const { mutateAsync: signAndExecuteTransaction } = useSignAndExecuteTransaction();
    

    // üí• H√†m mint Hulk token (Token A)
    const mintHulkToken = async () => {
        // Ki·ªÉm tra ƒë·ªß th√¥ng tin m√¥i tr∆∞·ªùng tr∆∞·ªõc khi t·∫°o giao d·ªãch
        if (!TOKEN_A_TYPE || !TREASURY_CAP_A || !PKG) {
            throw new Error("Missing environment variables");
        }

        // ‚ú® Kh·ªüi t·∫°o m·ªôt giao d·ªãch m·ªõi
        const tx = new Transaction();

        // Thi·∫øt l·∫≠p gas limit cho giao d·ªãch (ƒë∆°n v·ªã: MIST)
        tx.setGasBudget(30_000_000);

        // üß± T·∫°o m·ªôt Move call (g·ªçi h√†m trong smart contract)
        tx.moveCall({
            target: `${PKG}::${TOKEN_A}::${FN_MINT_HULK_TOKEN}`, // V√≠ d·ª•: 0xabc::token_a::mint_token
            arguments: [
                tx.object(TREASURY_CAP_A), // Truy·ªÅn v√†o TreasuryCap c·ªßa token ƒë·ªÉ mint
            ],
        });

        // üìù K√Ω v√† g·ª≠i giao d·ªãch l√™n blockchain
        return signAndExecuteTransaction({ transaction: tx });
    };


    // üí• H√†m mint Girlfriend token (Token B)
    const mintGirlfriendToken = async () => {
        // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
        if (!TOKEN_B_TYPE || !TREASURY_CAP_B || !PKG) {
            throw new Error("Missing environment variables");
        }

        // ‚ú® Kh·ªüi t·∫°o transaction m·ªõi
        const tx = new Transaction();
        tx.setGasBudget(30_000_000);

        // G·ªçi h√†m mint token trong module token_b
        tx.moveCall({
            target: `${PKG}::${TOKEN_B}::${FN_MINT_GIRLFRIEND}`, // V√≠ d·ª•: 0xabc::token_b::mint_token
            arguments: [
                tx.object(TREASURY_CAP_B), // Truy·ªÅn TreasuryCap c·ªßa token B
            ],
        });
        
        // K√Ω v√† g·ª≠i giao d·ªãch
        return signAndExecuteTransaction({ transaction: tx });
    };


    // üßæ Tr·∫£ v·ªÅ 2 h√†m ti·ªán √≠ch ƒë·ªÉ d√πng trong component React
    // - mintHulkToken() ‚Üí mint token A
    // - mintGirlfriendToken() ‚Üí mint token B
    return { mintHulkToken, mintGirlfriendToken };
}
